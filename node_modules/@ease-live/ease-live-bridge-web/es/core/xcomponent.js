function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { createUrl } from '../utils';
var zoids = {};
var zoidUrls = {};
var zoidDimensions = {};
export default function (easeLiveInstance) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var easeLive = easeLiveInstance;

  var config = _objectSpread(_objectSpread({}, easeLive.options), options); // TODO


  config.params.zoid = 1;

  function setupError(message) {
    easeLive.dispatcher.emit('view.error', {
      type: 'fatal',
      message: message
    });
  }

  if (!config.playerContainer && !easeLive.options.viewContainer) {
    setupError('Configuration property "playerContainer" is missing. Not able to attach the container to the DOM.');
    return undefined;
  }

  if (!config.url) {
    setupError('Configuration property "url" is missing. Not able to attach the container to the DOM.');
    return undefined;
  }

  var url = createUrl(config);
  var tag = config.tag || 'ease-live';
  easeLive.emit('view.init', {
    url: url
  }); // make sure dimensions/url are updated if the tag was created previously

  zoidUrls[tag] = url;
  zoidDimensions[tag] = {
    width: config.width || '100%',
    height: config.height || '100%'
  };

  var _URL = new URL(url),
      hostname = _URL.hostname,
      protocol = _URL.protocol;

  var allowList = "".concat(protocol, "//").concat(hostname); // only create a tag once

  var EaseLiveComponent = zoids[tag] || config.createView({
    tag: tag,
    defaultLogLevel: 'error',
    url: function url() {
      return zoidUrls[tag];
    },
    attributes: {
      iframe: {
        allow: "camera ".concat(allowList, ";microphone ").concat(allowList, ";clipboard-read ").concat(allowList, ";clipboard-write ").concat(allowList, ";")
      }
    },
    dimensions: function dimensions() {
      return zoidDimensions[tag];
    },
    prerenderTemplate: function containerTemplate(_ref) {
      var doc = _ref.doc;
      return doc.createElement('html');
    }
  });

  if (!zoids[tag]) {
    zoids[tag] = EaseLiveComponent;
  }

  var appDispatcher;
  var viewContainer; // TODO error handling

  var targetContainer = easeLive.options.viewContainer || config.playerContainer;

  if (typeof targetContainer === 'string') {
    targetContainer = document.querySelector(targetContainer);
  }

  EaseLiveComponent({
    timeout: config.setupTimeout || 10000,
    onTimeout: function onTimeout() {},
    onError: function onError() {// handled below but zoid requires this to be here
    },
    logLevel: config.logLevel,
    emit: function emit(e, metadata) {
      var sender = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
        id: 'web-app'
      };
      var event = e; // eslint-disable no-param-reassign

      if (event === 'StageClicked') {
        event = 'bridge.stage';
      } else if (event === 'WebAppOnLoadEnd') {
        event = 'app.ready';
      } else if (event === 'WebAppOnLoadStart') {
        event = 'app.loading';
      }

      easeLive.emit(event, metadata, sender);
    },
    setDispatcher: function setDispatcher(d) {
      appDispatcher = d;
    }
  }).render(targetContainer).then(function () {
    viewContainer = targetContainer.querySelector("div[id^=zoid-".concat(tag, "]"));

    if (!viewContainer) {
      // when used inside shadow dom
      var slot = targetContainer.querySelector('slot');

      if (slot && slot.name) {
        var slotContainer = document.querySelector("div[slot^=".concat(slot.name, "]"));

        if (slotContainer) {
          slotContainer.style.width = config.width || '100%';
          slotContainer.style.height = config.height || '100%';
        }

        viewContainer = document.querySelector("div[slot^=".concat(slot.name, "] > div[id^=zoid-").concat(tag, "]"));
      }
    }

    if (viewContainer) {
      viewContainer.addEventListener('mouseenter', function () {
        easeLive.emit('view.mouseenter');
      });
      var outlet = viewContainer.querySelector('iframe');

      if (outlet) {
        outlet.style.pointerEvents = 'none';
      }

      var tmpStageClicked = function tmpStageClicked() {
        easeLive.emit('bridge.stage'); // emulate while loading

        easeLive.emit('stage.clicked'); // TODO compat with old event name
      };

      viewContainer.addEventListener('click', tmpStageClicked);
      easeLive.once('app.ready', function () {
        viewContainer.removeEventListener('click', tmpStageClicked);

        if (outlet) {
          outlet.style.pointerEvents = '';
        }
      });
    }

    easeLive.emit('view.ready', {
      viewContainer: viewContainer,
      url: url
    });
  })["catch"](function (err) {
    easeLive.emit('view.error', err);
  }); // forward all player events to the app

  function onPlayerEvent(data, sender) {
    if (appDispatcher) {
      appDispatcher.emit(this.event, data, sender);
    }
  }

  easeLive.on('player.*', onPlayerEvent); // forward all bridge events to the app

  function onBridgeEvent(data, sender) {
    if (appDispatcher) {
      appDispatcher.emit(this.event, data, sender);
    }
  }

  easeLive.on('bridge.*', onBridgeEvent);

  function onStageEvent(data, sender) {
    if (appDispatcher) {
      appDispatcher.emit(this.event, data, sender);
    }
  }

  easeLive.on('stage.*', onStageEvent);

  function onDeviceInfo(data, sender) {
    if (appDispatcher) {
      appDispatcher.emit(this.event, data, sender);
    }
  }

  easeLive.on('app.deviceinfo', onDeviceInfo);

  function onMessage(json, sender) {
    if (appDispatcher) {
      appDispatcher.emit(json.event, json.metadata, sender);
    }
  }

  easeLive.on('appMessage', onMessage);

  function onLoadEnd() {
    console.log('bridge: WebApp Loading Complete');
  }

  easeLive.on('WebAppOnLoadEnd', onLoadEnd);

  function onDestroy() {
    if (viewContainer) {
      viewContainer.remove();
    }

    easeLive.off('WebAppOnLoadEnd', onLoadEnd);
    easeLive.off('destroy', onDestroy);
    easeLive.off('app.deviceinfo', onDeviceInfo);
    easeLive.off('bridge.*', onBridgeEvent);
    easeLive.off('player.*', onPlayerEvent);
    easeLive.off('stage.*', onStageEvent);
    appDispatcher = null;
    easeLive = null;
  }

  easeLive.on('destroy', onDestroy);
  return EaseLiveComponent;
}