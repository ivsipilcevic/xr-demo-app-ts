function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

import EventEmitter from 'eventemitter2';

var EventDispatcher = /*#__PURE__*/function () {
  function EventDispatcher() {
    _classCallCheck(this, EventDispatcher);

    this.eventEmitter = new EventEmitter({
      wildcard: true
    });
  }

  _createClass(EventDispatcher, [{
    key: "on",
    value: function on() {
      if ((arguments.length <= 0 ? undefined : arguments[0]) === '*') {
        this.eventEmitter.onAny(arguments.length <= 1 ? undefined : arguments[1]);
      } else {
        var _this$eventEmitter;

        (_this$eventEmitter = this.eventEmitter).on.apply(_this$eventEmitter, arguments);
      }
    }
  }, {
    key: "off",
    value: function off() {
      if ((arguments.length <= 0 ? undefined : arguments[0]) === '*') {
        this.eventEmitter.offAny(arguments.length <= 1 ? undefined : arguments[1]);
      } else {
        var _this$eventEmitter2;

        (_this$eventEmitter2 = this.eventEmitter).off.apply(_this$eventEmitter2, arguments);
      }
    }
  }, {
    key: "once",
    value: function once() {
      var _this$eventEmitter3;

      (_this$eventEmitter3 = this.eventEmitter).once.apply(_this$eventEmitter3, arguments);
    }
  }, {
    key: "many",
    value: function many() {
      var _this$eventEmitter4;

      (_this$eventEmitter4 = this.eventEmitter).many.apply(_this$eventEmitter4, arguments);
    }
  }, {
    key: "listeners",
    value: function listeners() {
      var _this$eventEmitter5;

      (_this$eventEmitter5 = this.eventEmitter).listeners.apply(_this$eventEmitter5, arguments);
    }
  }, {
    key: "emit",
    value: function emit() {
      var _this$eventEmitter6;

      (_this$eventEmitter6 = this.eventEmitter).emit.apply(_this$eventEmitter6, arguments);
    }
  }, {
    key: "removeAllListeners",
    value: function removeAllListeners() {
      var _this$eventEmitter7;

      (_this$eventEmitter7 = this.eventEmitter).removeAllListeners.apply(_this$eventEmitter7, arguments);
    }
  }]);

  return EventDispatcher;
}();

export default EventDispatcher;