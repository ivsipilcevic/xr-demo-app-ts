import _trim from "lodash/trim";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

import UAParser from 'ua-parser-js';
import EventDispatcher from './EventDispatcher';
import error from './core/error';
import xcomponent from './core/xcomponent';
import packageInfo from '../package.json';
import RestApi from './RestApi';
import { getUrlQueryParam } from './utils';
var version = packageInfo.version;

var loadScript = function loadScript(scriptUrl, onLoad, onError) {
  var scriptTag = document.createElement('script');
  scriptTag.src = scriptUrl;

  scriptTag.onload = function () {
    if (!window.createEaseLiveWebBridgeHost) {
      onError();
    } else {
      console.log('Loaded bridge script');
      onLoad();
    }
  };

  scriptTag.onerror = function () {
    onError();
  };

  document.head.appendChild(scriptTag);
};

var EaseLive = /*#__PURE__*/function () {
  function EaseLive() {
    var _this = this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, EaseLive);

    this.player = undefined;
    this.view = undefined;
    var defaults = {
      logLevel: 'info',
      params: {
        loaderTimeout: 30
      }
    };
    this.options = _objectSpread(_objectSpread({}, defaults), options);
    this.options.params = _objectSpread(_objectSpread({}, defaults.params), options.params);
    this.isPlayerReady = false;
    this.installedPlugins = [];
    this.dispatcher = new EventDispatcher();
    var accountId = this.options.accountId || this.options.params.accountId || getUrlQueryParam(this.options.url, 'accountId');

    if (accountId) {
      this.api = new RestApi({
        accountId: accountId
      });

      if (!this.options.params.accountId) {
        this.options.params.accountId = accountId;
      }
    }

    if (!this.options.params.projectId && this.options.projectId) {
      this.options.params.projectId = this.options.projectId;
    }

    if (!this.options.params.programId && this.options.programId) {
      this.options.params.programId = this.options.programId;
    } // set up dispatch shortcuts


    ['on', 'off', 'emit', 'once'].forEach(function (fn) {
      _this[fn] = _this.dispatcher[fn].bind(_this.dispatcher);
    }); // apply internal plugins directly, they aren't optional

    error(this);
    this.checkRequiredParms(); // log all events if loglevel is 'debug'

    if (options.logLevel === 'debug') {
      console.log('Initializing Ease Live', options);
      this.on('*', function (event, data) {
        console.log(event, data);
      });
    }
  }

  _createClass(EaseLive, [{
    key: "checkRequiredParms",
    value: function checkRequiredParms() {
      var _this2 = this;

      var requiredParameters = ['playerPlugin'];
      requiredParameters.forEach(function (parameter) {
        if (!_this2.options[parameter]) {
          var message = "missing ".concat(parameter, " parameter");

          _this2.emit('bridge.error', {
            type: 'fatal',
            message: message
          });

          throw new Error(message);
        }
      });

      if (!(this.options.url || this.options.params.accountId && (this.options.params.projectId || this.options.params.programId))) {
        var message = 'accountId or url parameter must be set';
        this.emit('bridge.error', {
          type: 'fatal',
          message: message
        });
        throw new Error(message);
      }
    }
  }, {
    key: "getPlayer",
    value: function getPlayer() {
      return this.player;
    }
  }, {
    key: "use",
    value: function use(plugin) {
      if (this.installedPlugins.indexOf(plugin) > -1) {
        return this;
      }

      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      args.unshift(this);

      try {
        if (typeof plugin.install === 'function') {
          plugin.install.apply(plugin, args);
        } else if (typeof plugin === 'function') {
          plugin.apply(void 0, args);
        }

        this.installedPlugins.push(plugin);
      } catch (e) {
        console.error('Error loading plug-in', e);
        this.emit('bridge.error', {
          type: 'warning',
          message: e.message
        });
      }

      return this;
    }
  }, {
    key: "init",
    value: function init() {
      var _this3 = this;

      if (this.options.setupTimeout) {
        setTimeout(function () {
          if (_this3.isPlayerReady !== true) {
            _this3.dispatcher.emit('player.error', {
              message: 'Player setup timed out.'
            });
          }
        }, this.options.setupTimeout);
      }

      var viewPlugin = this.options.viewPlugin || xcomponent;
      var playerPlugin = this.options.playerPlugin;
      this.on('bridge.ready', function () {
        var parser = new UAParser(navigator.userAgent);
        var type = 'desktop';
        var device = parser.getDevice();

        if (device && device.type) {
          if (device.type === 'tablet') {
            type = 'tablet';
          } else if (device.type === 'mobile') {
            type = 'phone';
          } else if (device.type === 'smarttv' || device.type === 'console') {
            type = 'tv';
          }
        }

        var os = {};
        var deviceOs = parser.getOS();

        if (deviceOs && deviceOs.name) {
          os.name = deviceOs.name.toLowerCase().replace(' ', '');
          os.version = deviceOs.version;
        }

        setTimeout(function () {
          _this3.dispatcher.emit('app.deviceinfo', {
            type: type,
            orientation: window.innerHeight > window.innerWidth ? 'portrait' : 'landscape',
            model: navigator.userAgent,
            sdk: "web-".concat(version),
            protocol: '2.0',
            os: os
          });

          if (_this3.isPlayerReady) {
            _this3.dispatcher.emit('easelive.ready');
          }
        }, 0);
      });
      this.on('player.ready', function () {
        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        _this3.isPlayerReady = true;

        if (data.player) {
          _this3.player = data.player;
        }

        var createViewPlugin = function createViewPlugin() {
          _this3.view = Array.isArray(viewPlugin) ? viewPlugin[0](_this3, _objectSpread(_objectSpread({}, viewPlugin[1]), data)) : viewPlugin(_this3, data);
        };

        var initView = function initView() {
          if (_this3.options.createView || _this3.options.viewPlugin) {
            createViewPlugin();
          } else {
            // load script for creating the Zoid bridge host
            _this3.options.createView = function (options) {
              return window.createEaseLiveWebBridgeHost(options);
            };

            var livePath = _this3.options.url.split('index.html')[0];

            var bridgeJs = "".concat(_trim(livePath, '/'), "/js/webbridge.js");
            loadScript(bridgeJs, function () {
              createViewPlugin();
            }, function () {
              loadScript("".concat(livePath.split('/live/')[0], "/js/webbridge.js"), function () {
                createViewPlugin();
              }, function () {
                loadScript('https://studio.easelive.tv/live/js/webbridge.js', function () {
                  createViewPlugin();
                }, function () {
                  _this3.emit('view.error', {
                    type: 'fatal',
                    message: 'Error loading bridge script'
                  });
                });
              });
            });
          }
        };

        if (!_this3.options.url && _this3.api) {
          var loadProject = function loadProject() {
            _this3.api.getProject(_this3.options.projectId, _this3.options.env).then(function (project) {
              _this3.options.url = project.webappUrl;
              initView();
            })["catch"](function () {
              _this3.emit('view.error', {
                type: 'fatal',
                message: 'Error loading project'
              });
            });
          };

          if (!_this3.options.projectId) {
            _this3.api.getProgram(_this3.options.params.programId).then(function (program) {
              _this3.options.projectId = program.projectId;
              loadProject();
            })["catch"](function () {
              _this3.emit('view.error', {
                type: 'fatal',
                message: 'Error loading project'
              });
            });
          } else {
            loadProject();
          }
        } else {
          initView();
        }
      });
      this.player = Array.isArray(playerPlugin) ? playerPlugin[0](this, playerPlugin[1]) : playerPlugin(this);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.dispatcher.emit('destroy');
      this.dispatcher.removeAllListeners();
      this.player = null;
      this.view = null;
    }
  }]);

  return EaseLive;
}();

EaseLive.xcomponent = xcomponent;
export default EaseLive;