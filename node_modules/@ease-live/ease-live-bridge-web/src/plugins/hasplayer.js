let player;
let isReady;
let setupTimeout;
// let timestamp;

export default function (EaseLive, config) {
	console.log('Installing HasPlayer player plugin...');

	EaseLive.getPlayer = () => player; // eslint-disable-line no-param-reassign

	EaseLive.on('player.create', () => {
		setupTimeout = config.setupTimeout ? config.setupTimeout : 5000;
		setTimeout(() => {
			if (isReady !== true) {
				EaseLive.fire('player.setupError', {
					message: 'Error loading player. Could not detect HasPlayer.',
				});
			}
		}, setupTimeout);
	});

	player = new MediaPlayer(); // eslint-disable-line no-undef
	player.init(config.player);
	player.load(config.hasplayer);

	let triggerOnce = false;

	player.addEventListener('play', () => {
		isReady = true;

		if (!triggerOnce) {
			triggerOnce = true;
			EaseLive.fire('player.ready', {
				playerContainer: config.player.parentNode,
			});
		}
	});

	player.addEventListener('error', (reason) => {
		EaseLive.fire('player.setupError', {
			type: 'fatal',
			message: reason,
		});
	});

	player.addEventListener('timeupdate', () => {
		const epoch = player.getVideoModel().getCurrentTime();

		if (!isNaN(new Date(epoch * 1000).getTime())) {
			EaseLive.fire('player.time', {
				timecode: Math.ceil(epoch * 1000),
			});
		} else {
			EaseLive.fire('player.error', {
				type: 'warning',
				message: 'Cannot parse timestamp format from video',
			});
		}
	});

	function onPlayerState(state) {
		EaseLive.fire('player.state', {
			state,
		});
	}

	player.addEventListener('play', () => onPlayerState('playing'));
	player.addEventListener('pause', () => onPlayerState('paused'));
	player.addEventListener('state_changed', (e) => {
		EaseLive.fire('player.state', {
			state: e.state,
		});
	});
}
