function install(easeLive, config) {
	console.log('Installing JW Player plugin...');
	// We expect a jwplayer instance to be passed in as a parameter
	const { player } = config;

	// Verify that it is present, otherwise trigger an error
	if (!player) {
		easeLive.emit('player.error', {
			type: 'fatal',
			message: 'missing player paramter',
		});
		return player;
	}

	const jwVersion = parseInt(player.version, 10);
	const playerContainer = player.getContainer();

	// view.mouseenter is triggered when the mouse enters the EL container.
	// We use it to toggle the player controls.
	function onMouseEnter() {
		if (jwVersion <= 7) {
			// need to set to false first to make it work with jw's autohide
			player.setControls(false);
			player.setControls(true);
		} else {
			player.setControls(true);
			playerContainer.classList.remove('jw-flag-user-inactive');
		}
	}

	easeLive.on('view.mouseenter', onMouseEnter);

	// When the EL app background is clicked, toggle the controls
	function onStage() {
		player.setControls();
	}
	easeLive.on('bridge.stage', onStage);

	// Attach player state notification.
	// We need to make sure that the EL app knows about the player state.
	function notifyState(state) {
		easeLive.emit('player.state', { state });
	}
	function onBridgeReady() {
		notifyState(player.getState());
	}
	easeLive.on('bridge.ready', onBridgeReady);
	function onPlay() {
		notifyState('playing');
	}
	player.on('play', onPlay);
	function onPause() {
		notifyState('paused');
	}
	player.on('pause', onPause);
	function onBuffer() {
		notifyState('buffering');
	}
	player.on('buffer', onBuffer);
	function onComplete() {
		notifyState('stopped');
	}
	player.on('complete', onComplete);

	// When the player is ready, we need to trigger the player.ready event.
	// It should include a reference to the player DOM container.
	function onPlayerReady() {
		console.log('JW Player is ready...');
		easeLive.emit('player.ready', {
			playerContainer: document.getElementById(player.id),
		});
	}
	if (player.getConfig().viewable) { // player already ready, trigger immediately
		onPlayerReady();
	} else {
		player.on('ready', onPlayerReady);
	}

	// Redistribute errors.
	function onError(reason) {
		easeLive.emit('player.error', {
			type: 'warning',
			message: reason,
		});
	}
	player.on('error', onError);

	// Read timecodes, trigger player.time
	function onMeta(event) {
		easeLive.emit('player.meta', event);

		if (event && event.metadata) {
			if (event.metadata.COMM || event.metadata.TXXX) {
				try {
					let data = event.metadata.COMM || event.metadata.TXXX;
					if (typeof data !== 'string') {
						data = data.eng;
					}
					if (typeof data === 'string') {
						data = JSON.parse(data);
					}
					easeLive.emit('player.time', {
						timecode: parseInt(data.ut, 10),
					});
				} catch (err) {
					console.error(event, err);
				}
			}
		}
	}
	player.on('meta', onMeta);

	function onSeek(event) {
		easeLive.emit('player.seek', event);
	}
	player.on('seek', onSeek);

	function onTime(event) {
		easeLive.emit('player.position', event);
	}
	player.on('time', onTime);

	// teardown
	function onDestroy() {
		easeLive.off('bridge.ready', onBridgeReady);
		easeLive.off('bridge.stage', onStage);
		easeLive.off('destroy', onDestroy);
		easeLive.off('view.mouseenter', onMouseEnter);
		player.off('buffer', onBuffer);
		player.off('complete', onComplete);
		player.off('error', onError);
		player.off('meta', onMeta);
		player.off('pause', onPause);
		player.off('play', onPlay);
		player.off('ready', onPlayerReady);
		player.off('seek', onSeek);
		player.off('time', onTime);
	}
	easeLive.on('destroy', onDestroy);

	// return the jwplayer instance
	return player;
}

export default install;
