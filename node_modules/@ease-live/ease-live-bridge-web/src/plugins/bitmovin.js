// This BitMovin plugin assumes a global bitmovin variable is available (e.g. loaded via script tag)
/* global bitmovin */

function isHls(player) {
	return player.getStreamType() === 'hls';
}

export default function (easeLive, config) {
	console.log('Installing BitMovin player plugin...');

	const bitmovinConfig = {
		onError: (data) => {
			easeLive.emit('player.error', {
				message: data,
			});
		},
		...config.bitmovin,
	};
	let { player } = config;
	const { playerContainerId } = config;

	// Store initial segment time for HLS timecode parsing
	let initialSegmentTime;

	if (!player && typeof bitmovin === 'undefined') {
		easeLive.emit('player.error', {
			type: 'fatal',
			message: 'bitmovin undefined',
		});
		return undefined;
	}

	function ready() {
		easeLive.emit('player.ready', {
			player,
			playerContainer: player.getFigure(),
		});
	}

	if (player) { // we already got a player instance
		ready();
	} else { // create a new bitmovin player instance
		player = bitmovin.player(playerContainerId);
		player.setup(bitmovinConfig).then(() => {
			ready();
		}, (reason) => {
			easeLive.emit('player.error', {
				type: 'fatal',
				message: reason,
			});
		});
	}

	player.addEventHandler('onTimeChanged', (e) => {
		// In HLS, the time is only relative from the initial segment time
		if (isHls(player)) {
			e.time = (e.time * 1000) + initialSegmentTime;
		}

		if (isNaN(e.time)) return;

		if (!isNaN(new Date(e.time * 1000).getTime())) {
			easeLive.emit('player.time', {
				timecode: Math.ceil(e.time * 1000),
			});
		} else {
			easeLive.emit('player.error', {
				type: 'warning',
				message: 'Cannot parse timestamp format from video',
			});
		}
	});

	/**
	 * Read initial HLS segment time once to be able to calculate the video
	 * position in onTimeChanged
	 */
	player.addEventHandler('onSegmentPlayback', (e) => {
		if (isHls(player) && initialSegmentTime === undefined) {
			initialSegmentTime = new Date(e.dateTime).getTime();
		}
	});

	function onPlayerState(state) {
		easeLive.emit('player.state', {
			state,
		});
	}

	player.addEventHandler('onPlay', () => onPlayerState('playing'));
	player.addEventHandler('onPaused', () => onPlayerState('paused'));
	player.addEventHandler('onStallStarted', () => onPlayerState('buffering'));
	player.addEventHandler('onStallEnded', () => onPlayerState('playing'));
	player.addEventHandler('onTimeShift', () => onPlayerState('seeking'));
	player.addEventHandler('onTimeShifted', () => onPlayerState('playing'));

	// return the bitmovin instance
	return player;
}
